// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/*
  SimpleToken â€” minimal single-file ERC-20 token
  - Single file, no imports (easy verification without flattening)
  - Owner may mint/burn (use with caution in production)
  - Standard ERC-20 interface: transfer, approve, transferFrom, allowance, balanceOf
  - Includes increase/decrease allowance helpers to avoid race conditions
  - Designed for easy verification on Etherscan/BaseScan
*/

contract SimpleToken {
    // ERC20 basic data
    string public name;
    string public symbol;
    uint8 public immutable decimals = 18;
    uint256 public totalSupply;

    // Ownership
    address public owner;

    // Balances & allowances
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    // Events
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event OwnerChanged(address indexed previousOwner, address indexed newOwner);

    // Modifiers
    modifier onlyOwner() {
        require(msg.sender == owner, "SimpleToken: caller is not the owner");
        _;
    }

    // Constructor
    // initialSupply is in whole tokens (will be scaled by decimals)
    constructor(string memory _name, string memory _symbol, uint256 initialSupply) {
        require(bytes(_name).length > 0 && bytes(_symbol).length > 0, "SimpleToken: name/symbol required");
        name = _name;
        symbol = _symbol;
        owner = msg.sender;
        emit OwnerChanged(address(0), owner);
        if (initialSupply > 0) {
            _mint(owner, initialSupply * (10 ** decimals));
        }
    }

    // ============ ERC20 standard ============

    function balanceOf(address account) external view returns (uint256) {
        return _balances[account];
    }

    function allowance(address holder, address spender) external view returns (uint256) {
        return _allowances[holder][spender];
    }

    function transfer(address to, uint256 amount) external returns (bool) {
        _transfer(msg.sender, to, amount);
        return true;
    }

    function approve(address spender, uint256 amount) external returns (bool) {
        _allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address from, address to, uint256 amount) external returns (bool) {
        uint256 currentAllowance = _allowances[from][msg.sender];
        require(currentAllowance >= amount, "SimpleToken: transfer amount exceeds allowance");
        unchecked {
            _allowances[from][msg.sender] = currentAllowance - amount;
        }
        _transfer(from, to, amount);
        emit Approval(from, msg.sender, _allowances[from][msg.sender]);
        return true;
    }

    // Helper functions to avoid allowance race condition
    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {
        _allowances[msg.sender][spender] += addedValue;
        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {
        uint256 old = _allowances[msg.sender][spender];
        require(old >= subtractedValue, "SimpleToken: decreased below zero");
        unchecked { _allowances[msg.sender][spender] = old - subtractedValue; }
        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);
        return true;
    }

    // ============ Owner controls (mint / burn) ============
    // Mint new tokens to `to`
    function mint(address to, uint256 amount) external onlyOwner returns (bool) {
        _mint(to, amount);
        return true;
    }

    // Burn tokens from owner's balance
    function burn(uint256 amount) external onlyOwner returns (bool) {
        _burn(msg.sender, amount);
        return true;
    }

    // Transfer ownership (use with care)
    function setOwner(address newOwner) external onlyOwner {
        require(newOwner != address(0), "SimpleToken: zero owner");
        emit OwnerChanged(owner, newOwner);
        owner = newOwner;
    }

    // ============ Internal core ============

    function _transfer(address from, address to, uint256 amount) internal {
        require(from != address(0), "SimpleToken: transfer from zero");
        require(to != address(0), "SimpleToken: transfer to zero");
        uint256 fromBal = _balances[from];
        require(fromBal >= amount, "SimpleToken: transfer exceeds balance");
        unchecked { _balances[from] = fromBal - amount; }
        _balances[to] += amount;
        emit Transfer(from, to, amount);
    }

    function _mint(address to, uint256 amount) internal {
        require(to != address(0), "SimpleToken: mint to zero");
        totalSupply += amount;
        _balances[to] += amount;
        emit Transfer(address(0), to, amount);
    }

    function _burn(address from, uint256 amount) internal {
        require(from != address(0), "SimpleToken: burn from zero");
        uint256 bal = _balances[from];
        require(bal >= amount, "SimpleToken: burn exceeds balance");
        unchecked { _balances[from] = bal - amount; }
        totalSupply -= amount;
        emit Transfer(from, address(0), amount);
    }
}
